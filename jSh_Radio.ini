[Config]
Debug=NO
PunchBeep=YES
ZoomUI=5 # =100%
CheckForUpdate=45392
FormTop=585
FormLeft=7425

[LastUsed]
Source=SIRAPv2: localhost:10000:SERVER
Target=ODBC: sportident@klc01 on koe
Target2=

[TestPunch]
CodeNr=RANDOM # CodeNr used for test-punch
ChipNr=7420061 # 8028832 # ChipNr used for test-punch

# For the TimeStamp, you have three options:
# TimeStamp=NOW # uses current PC time, including sub-seconds (resolution is 1/256sec)
# TimeStamp=hh:nn:ss[.zzz] # give a time for today, optionally with sub-seconds
# TimeStamp=yyyy-mm-dd hh:nn:ss[.zzz] # give a time on a certain date, optionally with sub-seconds
TimeStamp=NOW

[FilterPunch]
# Sometimes, you might want certain incoming punches to be excluded from being
# forwarded to a certain target. One possible use is to separate punches from a
# "Start"-radio from the punches from radio-controls - this is required by OE2010
# (Start goes to "Competition day > Time taking > SPORTident", while controls
# go to "Speaker > Online monitor - Server").
# The format for this section is: a target can be either 'EXCLUDE' or 'INCLUDE',
# followed by a (comma-separated) list of controls (and, optionally, a comment).
# 'EXCLUDE' removes any code-numbers given (so the ones you do NOT give remain),
# 'INCLUDE' removes any code-numbers NOT given (so it's more like "include only")
# Example:
#Target=EXCLUDE,3,45 # remove codes 3 and 45
#Target2=INCLUDE,3,62,112 # include only codes 3, 62 and 112
# Note: in the above exampe, punches from 45 are removed completely, as they are
# explicitly excluded from "Target" and implicitly removed (because 45 is not
# named in the include-list) from "Target2".

#Target=INCLUDE,3 # Start punches only
#Target2=EXCLUDE,3 # All non-start punches

[TranslateCodeNr]
# Translate one CodeNr to another
# (useful in cases where a station needed to be replaced during the competition)
# Format: fromCodeNr=toCodeNr [# optional comment]
888=999 # control 888 is replaced by 999

# Note: translating to 0 will ignore all punches from this control!
666=0 # ignore all punches from hell :D

[GetModeFromCodeNr]
# Sadly, only D3mod-punches from SIACs include station-mode information.
# Therefore, we are forced to make guesses for the description in the controls-list.
# By default, CodeNr values over 30 are considered as 'CONTROL',
# while CodeNr values below 31 are considered as 'FINISH'.
# In this section, specific mode-assignments can be made.
# Valid mode-keywords are CLEAR, CHECK, START, CONTROL and FINISH.
# Example:
10=FINISH # CodeNr 10 is nearly always used as Finish in Sweden with OLA software

[TranslateChipNr]
# Translate one ChipNr to another
# (useful for events where runners have a second/backup chip)
# Format: fromChipNr=toChipNr [# optional comment]
1111=1234 # S.Niggli: chip 1111 is replaced by 1234
2222=2345 # D.Hubmann: chip 2222 is replaced by 2345

# Note: translating to 0 will ignore all punches from this chip!
666=0 # ignore all punches from the devil :D
8000000=0 # ignore punches from SIAC indicator (they don't have a valid time anyway)

[SerialCommDCB]
UseD3mod=YES # Use extended D3-message format (includes MODE information)
Source=baud=38400 parity=N data=8 stop=1
Target=baud=38400 parity=N data=8 stop=1

[TinyMesh]
QueryOnConnect=YES # Attempt to auto-identify Gateway in TinyMesh packet-mode
UploadStatus=NO # Upload radio status to http://radio.jsh.de/status/

[SubstitutionTokens]
# Some Target ports support substitution tokens in their output formats.
# Note: substitution tokens are case sensitive!
#  - %CodeNr% - the code number of the punched control
#  - %ChipNr% - the chip number from the punch record
#  - %PunchTime% - the time of the punch, format 'hh:nn:ss'
#  - %PunchSec% - the time of the punch, in seconds since midnight
#  - %PunchUnix% - the time of the punch, in UNIX-format 'UTC_seconds_since_epoch'
#  - %PunchSubSec% - the sub-second part of the punch-time, format 'zzz' (resolution is 1/256sec)
#  - %PunchDate% - the date of the punch, format 'yyyy-mm-dd'
#  - %StationModeNum% - the station mode in decimal notation
#  - %StationModeHex% - the station mode in hexadecimal notation
#  - %StationMode% - a textual representation of the station mode
#  - %NewLine% - a newline character sequence (CRLF = \r\n)

[FILE]
# Note: This section allows Target-specific configuration using format [FILE@Target2]

# The "FilePath" string may contain the following substition-key:
#  - %AppPath% - the file path of the jSh.Radio controller executable (with trailing slash)
FilePath=%AppPath%punches.txt

# The "Output" string may contain all tokens listed under the [SubstitutionTokens] section.
Output=%PunchDate% %PunchTime%: ChipNr %ChipNr% punched CodeNr %CodeNr%.%NewLine%

[SendKeys]
# Note: This section allows Target-specific configuration using format [SendKeys@Target2]

# The "Output" string may contain all tokens listed under the [SubstitutionTokens] section.
# Also, it can contain any of the special SendKeys-tokens as described by
# the Microsoft documentation: https://msdn.microsoft.com/library/office/gg278655.aspx
# Key modifiers: +=Shift / ^=Ctrl / %=Alt
Output=%PunchDate% %PunchTime%: ChipNr %ChipNr% punched CodeNr %CodeNr%.{ENTER}

[ROCread]
URL=http://roc.olresultat.se/getpunches_v4.php
CatchUp=180 # maximum age of first punch to read, in minutes
Interval=20 # time between each poll of webservice, in seconds (min=1, max=65)
LastSeenOffset=AUTO # offset to add/subtract to ROC-LastSeen timestamp, in minutes
# Note: ROC-LastSeen timestamps are in Swedish time. So for example Latvia is +60mins.
#    'AUTO' detects the offset according to the timezone of this PC relative to Sweden.

Device=jSh-ROC511

[SiLive]
URL=https://center.sportident.com/stamps/soap
SoapNamespace=https://www.sportident.com:8453/stamps/soap
CatchUp=180 # maximum age of first punch to read, in minutes
Interval=20 # time between each poll of webservice, in seconds (min=1, max=65)

ApiKey=UNKNOWN # provided by SPORTident
EventId=UNKNOWN # provided by SPORTident

[SIRAPv1]
# Format of SIRAPv1-config = hostname:port:zerotime_in_seconds
# Note1: for OE/OS2003, port is (10000 + Competition-Number);
#    for OLA it is always 10001; for MeOS, it must match the port you choose there (default=10001).
#  * Example: OE2003Speaker Competition-Number = 42 -> port = 10042
# Note2: zerotime is only needed for OE/OS2003; for OLA and MeOS it must always be 0!
#  * Example: OE2003-zerotime 9:30 o'clock -> zerotime = 9*3600 + 30*60 = 34200
Target=localhost:10001:0
Target2=localhost:10001:0

# Note3: Ox2003 and Ox2010 require FINISH punches to have CodeNr = 999,
#    so you must activate translation of any CodeNr < 31 to 999 here. ('YES')
#    But this translation must NOT be done for OLA and MeOS! ('NO')
#    'AUTO' auto-detects this setting according to the SIRAP-port number:
#    ports 10000 and 10001 are detected as 'NO', all other ports as 'YES'.
TranslateCN<31to999=AUTO
#    However note that MeOS also treats some CodeNr values as special:
#    (see http://www.melin.nu/meos/en/show.php?id=1148 )
#  - any punch with CodeNr greater than 30 is interpreted as a normal control
#  - any punch with CodeNr = 1 is interpreted as START
#  - any punch with CodeNr = 3 is interpreted as CHECK or CLEAR
#  - any punch with CodeNr below 31 but not 1 and not 3 is interpreted as FINISH

[SIRAPv2]
# Format of SIRAPv2-config = hostname:port
# Note: for OE/OS2010, port is 10000 by default, but that can be
# changed using a special 'Extra.ini' in the competition data folder:
##[ExtraSpeaker]
##Port=10001
Source=localhost:10000
Target=localhost:10000
Target2=localhost:10000

TranslateCN<31to999=AUTO # Defaults to 'YES' independant of port-number

[TcpIp]
# Format of TcpIp-config for SOURCE in SERVER mode (for incoming connections)
#Source=localhost:port[:SERVER] # Note: TCP-Server can ONLY be on localhost!
Source=localhost:12345

# Format of TcpIp-config for SOURCE in CLIENT mode (for one single outbound)
#Source=hostname:port:CLIENT # Note: TCP-Client can be local or remote
#Source=localhost:12345:CLIENT

# Format of TcpIp-config for TARGETs = hostname:port (always CLIENT mode)
Target=localhost:12345

# Note: This section allows Target-specific configuration ONLY of the parameters BELOW using format [TcpIp@Target2]

# "BinMode" selects between plain-text TCP/IP socket ('NO') or D3mod-over-TcpIp mode ('YES').
# In D3mod-over-TcpIp mode, SPORTident ExtendedProtocol AutoSend binary data is sent over TCP/IP.
# Note: in D3mod-over-TcpIp mode, the ConnectOutput/Expect and PunchOutput/Expect settings are ignored!
BinMode=NO # Plain-text TCP/IP socket ('NO') or D3mod-over-TcpIp mode ('YES')

# "ConnectOutput" is used to send a message to the server upon connection.
# Note: No substitutions are done! Simply leave blank if you don't want to send anything.
#ConnectOutput=Hello Server!
ConnectOutput=

# "ConnectExpect" is used if a message is expected in response to "ConnectOutput".
# Again, no substitutions are done! BUT non-printable characters (for example NewLine)
# must be masked to "."! Simply leave blank if you don't expect a response.
#ConnectExpect=Welcome, Client!..
ConnectExpect=

# "PunchOutput" for [TcpIp] is exactly the same as "Output" format in [FILE].
# So for the message format and possible substition tokens, check there...
# Example: simulate message format from SIReader. Note some leading spaces are intentional!
# EventId;SI-Card;CN;Mode;Source;DayOfWeek;PunchDate;PunchTime;No;Cnt
# 2010121901;4014242;42; CN;ONL;0; 2010-12-24; 15:50:24.035;0;1
PunchOutput=1;%ChipNr%;%CodeNr%; CN;ONL;0; %PunchDate%; %PunchTime%.%PunchSubSec%;0;1%NewLine%

# "PunchExpect" is used if a message is expected in response to a punch.
# All substitution tokens are possible! BUT non-printable characters (for example NewLine)
# must be masked to "."! Simply leave blank if you don't expect a response.
#PunchExpect=Punch OK..
PunchExpect=

[ODBC]
# Note1: This section allows Target-specific configuration using format [ODBC@Target2]
# Note2: The format of the "Connect" string depends on the database system used.
#    Many ConnectionString-examples can be found at http://www.connectionstrings.com/
#  * The "Connect" string may contain the following substition-key:
#  - %AppPath% - the file path of the jSh.Radio controller executable (with trailing slash)
# Note3: A maximum of 9 "Command" strings can be executed for each punch.
#    If the provider is capable, the commands are executed as a MultiRecordset-batch.
#  * The "Command" strings may contain all tokens listed under the [SubstitutionTokens] section.

# Example for Microsoft Access database:
#Connect=Provider=Microsoft.Jet.OLEDB.4.0; Data Source=\\path\to\the\database.mdb
#Connect=Provider=Microsoft.Jet.OLEDB.4.0; Data Source=%AppPath%jSh_Radio example.mdb
##Command1=CREATE TABLE punches (CodeNr INT, ChipNr INT, PunchTime DATE);
#Command1=INSERT INTO punches (CodeNr, ChipNr, PunchTime) VALUES (%CodeNr%, %ChipNr%, '%PunchDate% %PunchTime%');
#Command2=SELECT TOP 1 * FROM punches WHERE (CodeNr = %CodeNr%) AND (ChipNr = %ChipNr%) ORDER BY PunchTime DESC;

# Example for Microsoft SQL-Server:
#Connect=Provider=SQLOLEDB; Integrated Security=SSPI; Server=hostname\instancename; Database=tempdb;
#Connect=Provider=SQLOLEDB; Server=localhost\sqlexpress;Database=klc01;User Id=sportident;Password=sportident;
Connect=Provider=SQLOLEDB; Server=koe;Database=klc01;User Id=sportident;Password=sportident;

##Command1=SELECT @@VERSION AS SQL_Version;
##Command1=CREATE TABLE punches (CodeNr INT, ChipNr INT, PunchTime DATETIME);
Command1=INSERT INTO roc_punches (CodeNr, ChipNr, PunchTime, as_of_date) OUTPUT inserted.* select %CodeNr%, %ChipNr%, '%PunchDate% %PunchTime%', getdate();

# Example for MySQL-Server:
# Note: you will need the ODBC-driver from http://dev.mysql.com/downloads/connector/odbc/
#Connect=Driver={MySQL ODBC 5.3 ANSI Driver}; Server=hostname; Port=3306; Multi_Statements=1; User=username; Pwd=password; Database=temp;
##Command1=SELECT VERSION() AS SQL_Version;
##Command1=CREATE TABLE punches (CodeNr INT, ChipNr INT, PunchTime DATETIME);
#Command1=INSERT INTO punches (CodeNr, ChipNr, PunchTime) VALUES (%CodeNr%, %ChipNr%, '%PunchDate% %PunchTime%');
#Command2=SELECT * FROM punches WHERE (CodeNr = %CodeNr%) AND (ChipNr = %ChipNr%) ORDER BY PunchTime DESC LIMIT 1;

[WebClient]
# Note: This section allows Target-specific configuration using format [WebClient@Target2]

# The "URL", the "Header", and the "Body" strings may contain
# all tokens listed under the [SubstitutionTokens] section.
# If you do not need additional http-headers or a http-body,
# simply delete (or comment out) the example-lines below.
# Note: if any "Body"-lines are present, HTTP-method will be POST, otherwise GET!

URL=http://localhost/?control=%CodeNr%&chip=%ChipNr%&date=%PunchDate%&time=%PunchTime%

#URL=http://localhost/olive/ws.php
#Header=Content-Type: text/xml
#Header=SOAPAction: http://co-live.fr/olive/ws.php/EnregistrePointagePuce
#Body=<?xml version="1.0"?>
#Body=<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
#Body=<SOAP-ENV:Body><EnregistrePointagePuce>
#Body= <Course>1</Course>
#Body= <Puce>%ChipNr%</Puce>
#Body= <Heure>%PunchTime%</Heure>
#Body= <Poste>%CodeNr%</Poste>
#Body=</EnregistrePointagePuce></SOAP-ENV:Body></SOAP-ENV:Envelope>
